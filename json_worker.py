import json
import os
from datetime import datetime as dt
from time import strftime, gmtime, strptime
from dotenv import load_dotenv

load_dotenv()

user_weight = os.getenv('USER_WEIGHT')

bikes = ['–∑–∞–µ–∑–¥', '–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–µ–∑–¥', 'ride', 'virtualride']
run = ['–∑–∞–±–µ–≥', 'run']

"""
–ó–¥–µ—Å—å –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –æ—Ç—Å–µ–≤ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é,
 —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É –ø–æ –≥–æ—Ä–æ–¥—Å–∫–æ–º—É –≤–µ–ª–æ—Å–∏–ø–µ–¥—É
 
# equipment = {'b11325507' :
#              }
"""

file = open('data.json')
load_data = json.load(file)

nl = '\n'


def get_type_of_activity(i):
    type_of_activity = str.lower(load_data[i]['type'])
    if type_of_activity in bikes:
        return '–í–µ–ª–æ—Å–∏–ø–µ–¥'
    if type_of_activity in run:
        return '–ë–µ–≥'
    else:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ü§∑'


def get_heartrate(i):
    has_heartrate = load_data[i]['has_heartrate']
    if has_heartrate:
        average_heartrate = int(load_data[i]['average_heartrate'])
        max_heartrate = int(load_data[i]['max_heartrate'])
        return average_heartrate, max_heartrate
    else:
        average_heartrate = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        max_heartrate = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        return average_heartrate, max_heartrate


def get_power(i):
    has_powermeter = load_data[i]['device_watts']
    if has_powermeter:
        weighted_average_watts = int(load_data[i]['weighted_average_watts'])
        average_power = int(load_data[i]['average_watts'])
        max_power = int(load_data[i]['max_watts'])
        relative_power = round(weighted_average_watts / float(user_weight), 1)
        return weighted_average_watts, relative_power, average_power, max_power
    else:
        weighted_average_watts = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        relative_power = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        average_power = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        max_power = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        return weighted_average_watts, relative_power, average_power, max_power


def get_cadence(i):
    if 'average_cadence' in load_data[i]:
        average_cadence = int(load_data[i]['average_cadence'])
        return average_cadence
    else:
        average_cadence = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        return average_cadence


def get_energy_spent(i):
    if 'kilojoules' in load_data[i]:
        check_calories = int(load_data[i]['kilojoules'])
        return check_calories
    else:
        check_calories = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        return check_calories


def generation_analyse():
    statistics = []
    for i in range(0, len(load_data)):
        type_of_activity = get_type_of_activity(i)
        date = dt.strptime(load_data[i]['start_date_local'], '%Y-%m-%dT%H:%M:%SZ').date()
        distance = round(load_data[i]['distance'] / 1000, 2)
        moving_time = strftime("%H:%M:%S", gmtime(load_data[i]['moving_time']))
        total_elevation_gain = int(load_data[i]['total_elevation_gain'])
        achievement_count = load_data[i]['achievement_count']
        athlete_count = load_data[i]['athlete_count'] - 1
        average_speed = round(load_data[i]['average_speed'] * 3.6, 2)
        max_speed = round(load_data[i]['max_speed'] * 3.6, 2)
        elev_high = int(load_data[i]['elev_high'])
        elev_low = int(load_data[i]['elev_low'])
        check_heartrate = get_heartrate(i)
        check_calories = get_energy_spent(i)

        if type_of_activity == '–í–µ–ª–æ—Å–∏–ø–µ–¥':
            check_power = get_power(i)
            check_cadence = get_cadence(i)

            item = [f'üìÖ–î–∞—Ç–∞ ‚Äì {date}{nl}'
                    f'üö¥üèº‚Äç–í–∏–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äì {type_of_activity}{nl}'
                    f'üìè–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ‚Äì {distance}–∫–º{nl}'
                    f'‚è∞–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äì {moving_time}{nl}'
                    f'üèîÔ∏è–°—É–º–º–∞—Ä–Ω—ã–π –Ω–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã ‚Äì {total_elevation_gain}–º{nl}'
                    f'üéñÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥ ‚Äì {achievement_count}{nl}'
                    f'üëØ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äì {athlete_count}{nl}'
                    f'üèé–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äì {average_speed}–∫–º/—á{nl}'
                    f'üîù–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äì {max_speed}–∫–º/—á{nl}Ô∏è'
                    f'ü´Ä–°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å ‚Äì {check_heartrate[0]}{nl}'
                    f'‚ù§Ô∏è‚Äç–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å ‚Äì {check_heartrate[1]}{nl}'
                    f'üîã–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å ‚Äì {check_power[0]}{nl}'
                    f'‚öñÔ∏è–£–¥–µ–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å ‚Äì {check_power[1]}{nl}'
                    f'üí™–°—Ä–µ–¥–Ω—è—è –º–æ—â–Ω–æ—Å—Ç—å ‚Äì {check_power[2]}{nl}'
                    f'üß®‚Äç–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å ‚Äì {check_power[3]}{nl}'
                    f'üîÑ–°—Ä–µ–¥–Ω–∏–π –∫–∞–¥–µ–Ω—Å ‚Äì {check_cadence}{nl}'
                    f'‚¨ÜÔ∏è–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ ‚Äì {elev_high}–º{nl}'
                    f'‚¨áÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ ‚Äì {elev_low}–º{nl}'
                    f'üßÅ–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π ‚Äì {check_calories}{nl}']

            statistics.extend(item)
    # print(statistics)
        # –Ω–∏–∂–µ –∫–æ–¥ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –≤–∏–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ "–ë–µ–≥"
        if type_of_activity == '–ë–µ–≥':
            item_of_run = f'üìÖ–î–∞—Ç–∞ ‚Äì {date}{nl}'
            f"üèÉüèº‚Äç‚Äç–í–∏–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äì {type_of_activity}{nl}"
            f"üìè–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ‚Äì {distance}–∫–º{nl}"
            f"‚è∞–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äì {moving_time}{nl}"
            f"üèîÔ∏è–°—É–º–º–∞—Ä–Ω—ã–π –Ω–∞–±–æ—Ä –≤—ã—Å–æ—Ç—ã ‚Äì {total_elevation_gain}–º{nl}"
            f"üéñÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥ ‚Äì {achievement_count}{nl}"
            f"üëØ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äì {athlete_count}{nl}"
            f"üèé–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äì {average_speed}–∫–º/—á{nl}"
            f'üîù–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚Äì {max_speed}–∫–º/—á{nl}Ô∏è'
            f'ü´Ä–°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å ‚Äì {check_heartrate[0]}{nl}'
            f'‚ù§Ô∏è‚Äç–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å ‚Äì {check_heartrate[1]}{nl}'
            f'‚¨ÜÔ∏è–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ ‚Äì {elev_high}–º{nl}'
            f'‚¨áÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ ‚Äì {elev_low}–º{nl}'
            f'üßÅ–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π ‚Äì {check_calories}{nl}'

            statistics.extend(item_of_run)

    return statistics[-1]


# if __name__ == '__main__':
#     generation_analyse()
